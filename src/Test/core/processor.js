
    
    function rV(){const t=document.querySelectorAll("img");for(let e=0;e<t.length;e++){const n=t[e].getAttribute("swf-name"),r=t[e].getAttribute("swf-spaces"),i=t[e].getAttribute("swf-id");n&&(t[e].src=r?r+"/"+i+"/images/"+n:"./images/"+n),t[e].removeAttribute("swf-name"),t[e].removeAttribute("swf-id"),t[e].removeAttribute("swf-spaces")}}
    function oV(){const t=document.querySelectorAll("model-viewer");for(let n=0;n<t.length;n++){const r=t[n].getAttribute("swf-name"),i=t[n].getAttribute("swf-spaces"),o=t[n].getAttribute("swf-id"),s=t[n].getAttribute("swf-name-usdz"),a=t[n].getAttribute("stored-src"),l=t[n].getAttribute("swf-skybox"),c=t[n].hasAttribute("tooltip-enabled"),u=t[n].getAttribute("tooltip-text"),h=t[n].getAttribute("tooltip-text-color"),d=t[n].getAttribute("tooltip-bg-color"),p=t[n].querySelectorAll("button");if(p.forEach((t=>{t.style.display="none"})),t[n].removeAttribute("swf-name"),t[n].removeAttribute("swf-id"),t[n].removeAttribute("swf-spaces"),t[n].removeAttribute("swf-name-usdz"),a){const v=new URLSearchParams(window.location.search).get(t[n].getAttribute("index-swap-param")||"swf");function e(t,e){for(const n of t)if(n.id==e)return n.value;return null}const y=e(JSON.parse(a),v);y&&(t[n].src=i?i+"/"+o+"/models/"+y:"./models/"+y)}if(r){const A=i?i+"/"+o:".";t[n].src=`${A}/models/${r}`,s&&(t[n].iosSrc=`${A}/models/${s}`),l&&(t[n].skyboxImage=`${A}/environment/${l}`)}const f=document.createElement("div");c&&(f.innerHTML=u||"",f.style.backgroundColor=d||"#1E8FE1",f.style.color=h||"#FFFFFF",f.classList.add("ar-tooltip"),f.style.visibility="hidden");const m=t[n].querySelector(".swf-mv-btn");m?.appendChild(f);const g=function(){f.style.visibility="visible",setTimeout((()=>{f.style.visibility="hidden"}),5e3),p.forEach((t=>{t.style.display="flex"}))};t[n].addEventListener("load",g)}}
    function iV(){const t=document.querySelectorAll("button");for(let n=0;n<t.length;n++)t[n].hasAttribute("swf-vr-button")&&t[n].addEventListener("click",(()=>{const r=t[n].parentElement?t[n].parentElement:null,i={src:"",exposure:1,bgColor:"#cccccc",hdri:"",animation:"",handType:"lowPoly",handColor:"#ffcccc",movementSpeed:0};r&&(i.src=r.src,i.animation=r.animationName||"",i.exposure=parseFloat(r.getAttribute("exposure")||"1"),i.bgColor=window.getComputedStyle(r).backgroundColor,i.hdri=r.skyboxImage,i.handType=r.getAttribute("vr-hand-type")||"lowPoly",i.handColor=r.getAttribute("vr-hand-color")||"#ffcccc",i.movementSpeed=parseFloat(r.getAttribute("vr-movement-speed")||"0")),e(i)}));function e(t={src:"",exposure:1,bgColor:"#CCC",hdri:"",animation:"",handColor:"",handType:"",movementSpeed:0}){const e=document.createElement("div");e.innerHTML=`\n    <a-scene color="#7BC8A4"\n      vr-mode-ui="enterVRButton: #myEnterVRButton; enterARButton: #myEnterARButton"\n      gltf-model="dracoDecoderPath: https://swiftxr-static-assets.nyc3.digitaloceanspaces.com/dracoDecoder/"\n      renderer="antialias: true;\n      colorManagement: true;\n      sortObjects: true;\n      physicallyCorrectLights: true;">\n\n      <a-entity light="type: ambient;  color: #FFFFFF; intensity: 4;"></a-entity>\n      <a-entity light="type: directional;  color: #EEE; intensity: 1;" position="0 10 30"></a-entity>\n      <a-entity light="type: point; color: #FFFFFF; intensity: 2; distance: 500; decay: 28" position="0.418 16.199 0.300"></a-entity>\n\n      <a-entity \n        gltf-model="${t.src}" \n        animation-mixer="clip: ${t.animation};"\n        swf-object="triggerVR: true"\n      ></a-entity>\n\n      <a-sky color="${t.bgColor}" swf-sky="hdri: ${t.hdri}; exposure: ${t.exposure}"></a-sky>  \n      \n      \n      <a-entity id="cameraRig" movement-controls="constrainToNavMesh: true; speed: ${t.movementSpeed}" position="0 0 2">\n\n        \x3c!-- camera --\x3e\n        <a-camera id="head" far="1000" near="0.01"></a-camera>\n\n        <a-entity id="leftHand" \n          hand-controls="\n            hand: left; \n            handModelStyle: ${t.handType}; \n            color: ${t.handColor};"\n        ></a-entity>\n        \n        <a-entity id="rightHand" \n          hand-controls="\n            hand: right; \n            handModelStyle: ${t.handType}; \n            color: ${t.handColor};"\n          \n        ></a-entity>\n        \n\n    </a-entity> \n\n      \x3c!-- VR Button  --\x3e\n      <button id="myEnterVRButton" swf-vr-button class="swf-vr-button">Enter VR SwiftXR</button>\n      <button id="myEnterARButton"></button>\n\n\n    </a-scene>\n\n    <button id="close" class="vr-mode-close">Close</button> \n    `,document.body.appendChild(e);const n=e.querySelector("#close");n?.addEventListener("click",(()=>{e.remove(),document.querySelector("html")?.classList.remove("a-fullscreen")}))}}

    // Invoke Functions
    rV();
    oV();
    iV();

  